---
- name: Clusters_Info playbook
  hosts: localhost
  gather_facts: false

  tasks:
  - name: Read configuration
    set_fact:
        config: "{{ lookup('file', 'templates/config.json') }}"

  - name: add DNS
    uri:
        url: "{{ nutanix_url }}/cluster/name_servers"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: POST
        body: "{{ config.dns }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: cluster_dns

  - name: add ntp
    uri:
      url: "{{ nutanix_url }}/cluster/ntp_servers"
      user: "{{ vault_pe_username }}"
      password: "{{ vault_pe_password }}"
      method: POST
      body: "{{ config.ntp }}"
      force_basic_auth: yes
      validate_certs: no
      body_format: json
      status_code: 200, 201
      headers:
        Content-Type: application/json
      return_content: yes
    register: cluster_ntp

  - name: get storage container
    uri:
      url: "{{ nutanix_url }}/storage_containers"
      user: "{{ vault_pe_username }}"
      password: "{{ vault_pe_password }}"
      method: GET
      force_basic_auth: yes
      validate_certs: no
      body_format: json
      headers:
        Content-Type: application/json
      return_content: yes
    register: cluster_storage_containers

  - name: Print storage container values for default vstores
    debug:
        msg: "storage_container_uuid={{ item.storage_container_uuid }} vstore_name_list={{ item.vstore_name_list }}"
    loop: "{{ cluster_storage_containers.json.entities | selectattr('vstore_name_list.0', 'match', '^default.*') | list }}"
    loop_control:
        label: "{{ item.vstore_name_list }}"
    register: vstore_name_list_result

  - name: Store UUIDs for storage containers with vstore_name_list starting with 'default'
    set_fact:
        default_storage_container_uuids: "{{ cluster_storage_containers.json.entities | selectattr('vstore_name_list.0', 'match', '^default.*') | map(attribute='storage_container_uuid') | first }}"

  - name: delete default storage container
    uri:
      url: "{{ nutanix_url }}/storage_containers/{{ default_storage_container_uuids }}?ignore_small_files=true"
      user: "{{ vault_pe_username }}"
      password: "{{ vault_pe_password }}"
      method: DELETE
      force_basic_auth: yes
      validate_certs: no
      status_code: 200, 201, 204
    register: delete_storage_container

  - name: create Storage Container
    uri:
        url: "{{ nutanix_url }}/storage_containers"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: POST
        body: "{{ config.storagecontainer }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: storage_container

  - name: add VLANs
    loop: "{{ config.networkconfigurations }}"
    uri:
      url: "{{ nutanix_url }}/networks"
      user: "{{ vault_pe_username }}"
      password: "{{ vault_pe_password }}"
      method: POST
      body: "{{ item | to_json }}"
      force_basic_auth: yes
      validate_certs: no
      body_format: json
      status_code: 200, 201
      headers:
        Content-Type: application/json
      return_content: yes
    register: add_vlan

  - name: add SMTP
    uri:
        url: "{{ nutanix_url }}/cluster/smtp"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: PATCH
        body: "{{ config.smtp }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: add_smtp

  - name: add alert configuration
    uri:
        url: "{{ nutanix_url }}/alerts/configuration"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: PUT
        body: "{{ config.alert }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: add_alert_configuration

  - name: add data services IP
    uri:
        url: "{{ nutanix_url }}/cluster"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: PATCH
        body: "{{ config.dataservice }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: add_data_services_ip

  - name: get storage pools
    uri:
      url: "{{ nutanix_urlv1 }}/storage_pools"
      user: "{{ vault_pe_username }}"
      password: "{{ vault_pe_password }}"
      method: GET
      force_basic_auth: yes
      validate_certs: no
      body_format: json
      headers:
        Content-Type: application/json
      return_content: yes
    register: cluster_storage_pools

  - name: Store Storage pool UUID
    set_fact:
            default_storage_pool_uuid: "{{ cluster_storage_pools.json.entities[0].storagePoolUuid }}"
        
  - name: Print storage pool
    debug:
            msg: "{{ default_storage_pool_uuid }}"

  - name: update Storage Pool
    uri:
        url: "{{ nutanix_urlv1 }}/storage_pools"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: PATCH
        body: '{"storagePoolUuid": "{{ default_storage_pool_uuid }}", "name": "sp01"}'
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: storage_pool

  - name: configure HA
    uri:
        url: "{{ nutanix_url }}/ha"
        user: "{{ vault_pe_username }}"
        password: "{{ vault_pe_password }}"
        method: PUT
        body: "{{ config.ha }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        status_code: 200, 201
        headers:
                Content-Type: application/json
        return_content: yes
    register: configure_ha
